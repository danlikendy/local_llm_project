import sys
import io
import json
import re
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import torch
from transformers import (
    AutoTokenizer, 
    AutoModelForCausalLM, 
    pipeline
)

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –¥–ª—è Windows
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

class HybridVoicajLLM:
    """–ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: Rule-based + LLM –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    
    def __init__(self):
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        self.current_date = datetime.now()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
        self.training_data = self.load_training_data()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        self.llm_model = None
        self.llm_tokenizer = None
        self.llm_generator = None
        
        # –£–¥–∞–ª–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –≤ _detect_types
        
        # –¢–µ–≥–∏ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        self.tags_keywords = {
            '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '–æ—Ñ–∏—Å', '–∫–æ–ª–ª–µ–≥–∏', '–ø—Ä–æ–µ–∫—Ç', '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∫–ª–∏–µ–Ω—Ç', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–∫–∞—Ä—å–µ—Ä–∞', '–±–∏–∑–Ω–µ—Å', '–æ—Ç—á—ë—Ç', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'],
            '—Å–µ–º—å—è': ['—Å–µ–º—å—è', '–¥–µ—Ç–∏', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏', '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏', '–º–∞–º–∞', '–ø–∞–ø–∞'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–≤—Ä–∞—á', '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '–±–æ–ª—å–Ω–∏—Ü–∞', '—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª—ã–º', '–ø–æ–¥–∞–≤–ª–µ–Ω', '—Ç–µ—Ä–∞–ø–µ–≤—Ç'],
            '—Å–ø–æ—Ä—Ç': ['—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Ñ–∏—Ç–Ω–µ—Å', '–∑–∞–ª', '–±–µ–≥–∞—Ç—å', '–±–µ–≥', '–±–µ–≥–æ–≤–∞—è', '—É—Ç—Ä–µ–Ω–Ω–∏–π –±–µ–≥'],
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—Å–∞–π—Ç', '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ'],
            '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ': ['–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—á—É–≤—Å—Ç–≤—É—é', '—ç–º–æ—Ü–∏–∏', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ', '–≤–æ–ª–Ω—É—é—Å—å', '–Ω–µ—Ä–≤–Ω–∏—á–∞—é', '–ª—é–±–ª—é'],
            '—É—á–µ–±–∞': ['—É—á–µ–±–∞', '—ç–∫–∑–∞–º–µ–Ω', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∏–∑—É—á–∞—Ç—å', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '–ª–µ–∫—Ü–∏—è', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–≤—É–∑'],
            '–ø–æ–∫—É–ø–∫–∏': ['–ø–æ–∫—É–ø–∫–∏', '–∫—É–ø–∏—Ç—å', '–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥—É–∫—Ç', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–∫–æ—Å—Ç—é–º', '–ø–æ–¥–∞—Ä–æ–∫']
        }
        
        self.priority_keywords = {
            'high': ['—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '—Å–µ–≥–æ–¥–Ω—è', '–∑–∞–≤—Ç—Ä–∞'],
            'medium': ['–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ', '–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è'],
            'low': ['–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–Ω–µ —Å–ø–µ—à–∞', '–≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è', '—Å—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è', '–Ω–µ–≤–∞–∂–Ω–æ']
        }
        
        print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
    
    def load_training_data(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            with open('voicaj_training_data.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ö†Ô∏è –§–∞–π–ª –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return []
    
    def is_complex_request(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–æ–∂–Ω—ã–º –¥–ª—è LLM"""
        text_lower = text.lower()
        
        # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º rule-based
        simple_patterns = [
            r'–∑–∞–≤—Ç—Ä–∞.*–æ—Ç–ø—Ä–∞–≤–∏—Ç—å.*–æ—Ç—á—ë—Ç',
            r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞.*–æ—Ç–ø—Ä–∞–≤–∏—Ç—å.*–æ—Ç—á—ë—Ç',
            r'–∑–∞–≤—Ç—Ä–∞.*—Å—Ö–æ–¥–∏—Ç—å.*–ø—Ä–æ–¥—É–∫—Ç',
            r'–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞.*—Å—Ö–æ–¥–∏—Ç—å.*–ø—Ä–æ–¥—É–∫—Ç',
            r'–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.*–≤—É–∑',
            r'–∫–æ–¥.*—Ä–∞–±–æ—Ç–∞'
        ]
        
        for pattern in simple_patterns:
            if re.search(pattern, text_lower):
                return False
        
        # –°–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏ - –Ω—É–∂–Ω–∞ LLM
        complex_indicators = [
            len(text.split()) > 15,  # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            '–∏' in text_lower and text.count('–∏') > 2,  # –ú–Ω–æ–≥–æ —Å–æ—é–∑–æ–≤
            any(word in text_lower for word in ['–æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', '–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ', '—Ç–∞–∫–∂–µ', '–∫—Ä–æ–º–µ —Ç–æ–≥–æ']),
            text.count(',') > 3,  # –ú–Ω–æ–≥–æ –∑–∞–ø—è—Ç—ã—Ö
        ]
        
        return any(complex_indicators)
    
    def init_llm(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç LLM —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
        if self.llm_model is not None:
            return
            
        print("üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤...")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—É—é –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
            model_name = "microsoft/DialoGPT-small"
            
            self.llm_tokenizer = AutoTokenizer.from_pretrained(model_name)
            self.llm_model = AutoModelForCausalLM.from_pretrained(model_name)
            
            if self.llm_tokenizer.pad_token is None:
                self.llm_tokenizer.pad_token = self.llm_tokenizer.eos_token
            
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.llm_generator = pipeline(
                "text-generation",
                model=self.llm_model,
                tokenizer=self.llm_tokenizer,
                max_new_tokens=300,
                temperature=0.1,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏
                do_sample=True,
                pad_token_id=self.llm_tokenizer.eos_token_id,
                eos_token_id=self.llm_tokenizer.eos_token_id,
                repetition_penalty=1.2,  # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                length_penalty=1.0
            )
            
            print("‚úÖ LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ LLM: {e}")
            self.llm_model = None
    
    def rule_based_analysis(self, text: str) -> List[Dict[str, Any]]:
        """Rule-based –∞–Ω–∞–ª–∏–∑ (–±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Å–ª—É—á–∞–µ–≤)"""
        print("‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º rule-based –∞–Ω–∞–ª–∏–∑...")
        
        detected_types = self._detect_types(text.lower())
        if not detected_types:
            detected_types = ['task']
        
        # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–∏–ø –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        task_type = detected_types[0]
        result = self._create_object(text, task_type)
        
        return [result] if result else []
    
    def llm_analysis(self, text: str) -> List[Dict[str, Any]]:
        """LLM –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        print("üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –∞–Ω–∞–ª–∏–∑...")
        
        self.init_llm()
        
        if self.llm_model is None:
            print("‚ùå LLM –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º rule-based")
            return self.rule_based_analysis(text)
        
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –∑–∞–¥–∞—á –∏–∑ —Ç–µ–∫—Å—Ç–∞
            detected_types = self._detect_types(text.lower())
            if not detected_types:
                detected_types = ['task']
            
            # –°–æ–∑–¥–∞–µ–º —É–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤
            current_date = self.current_date.strftime("%Y-%m-%d")
            tomorrow = (self.current_date + timedelta(days=1)).strftime("%Y-%m-%d")
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã
            if 'mood_entry' in detected_types and 'task' in detected_types:
                prompt = f"""User: {text}

Assistant: I'll create both a mood entry and a task for you.

Mood Entry:
{{
    "title": "Emotional state",
    "type": "mood_entry",
    "description": "Current emotional state and feelings",
    "tags": ["–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", "—ç–º–æ—Ü–∏–∏"],
    "priority": "high",
    "dueDate": "{current_date} 18:00"
}}

Task:
{{
    "title": "Task to complete",
    "type": "task",
    "description": "Specific task that needs to be done",
    "tags": ["–∑–∞–¥–∞—á–∞"],
    "priority": "high",
    "dueDate": "{tomorrow} 18:00"
}}"""
            elif 'habit' in detected_types:
                prompt = f"""User: {text}

Assistant: I'll create a habit for you.

{{
    "title": "New habit",
    "type": "habit",
    "description": "Regular activity to develop",
    "tags": ["–ø—Ä–∏–≤—ã—á–∫–∞"],
    "priority": "medium",
    "dueDate": "{tomorrow} 18:00"
}}"""
            elif 'goal' in detected_types:
                prompt = f"""User: {text}

Assistant: I'll create a long-term goal for you.

{{
    "title": "Long-term goal",
    "type": "goal",
    "description": "Important long-term objective",
    "tags": ["—Ü–µ–ª—å"],
    "priority": "medium",
            "dueDate": "2025-12-31 23:59"
}}"""
            else:
                # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞
                prompt = f"""User: {text}

Assistant: I'll create a task for you.

{{
    "title": "Task",
    "type": "task",
    "description": "Specific task to complete",
    "tags": ["–∑–∞–¥–∞—á–∞"],
    "priority": "high",
    "dueDate": "{tomorrow} 18:00"
}}"""
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            result = self.llm_generator(
                prompt,
                max_new_tokens=200,
                temperature=0.1,
                do_sample=True,
                pad_token_id=self.llm_tokenizer.eos_token_id,
                eos_token_id=self.llm_tokenizer.eos_token_id,
                repetition_penalty=1.3,
                length_penalty=1.0
            )
            
            response = result[0]['generated_text'][len(prompt):].strip()
            print(f"üîç LLM –æ—Ç–≤–µ—Ç: {response[:100]}...")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –æ–±—ä–µ–∫—Ç—ã
            json_objects = []
            
            # –ò—â–µ–º –≤—Å–µ JSON –æ–±—ä–µ–∫—Ç—ã –≤ –æ—Ç–≤–µ—Ç–µ
            json_pattern = r'\{[^{}]*(?:\{[^{}]*\}[^{}]*)*\}'
            matches = re.findall(json_pattern, response, re.DOTALL)
            
            for match in matches:
                try:
                    # –û—á–∏—â–∞–µ–º JSON
                    json_str = match.strip()
                    if not json_str.endswith('}'):
                        json_str += '}'
                    
                    obj = json.loads(json_str)
                    
                    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —É–ª—É—á—à–∞–µ–º –æ–±—ä–µ–∫—Ç
                    improved_obj = self._validate_and_improve_object(obj, text)
                    if improved_obj:
                        json_objects.append(improved_obj)
                        
                except json.JSONDecodeError:
                    continue
            
            if json_objects:
                print(f"‚úÖ LLM —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª {len(json_objects)} –≤–∞–ª–∏–¥–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤!")
                return json_objects
            else:
                print("‚ö†Ô∏è LLM –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –≤–∞–ª–∏–¥–Ω—ã–π JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º rule-based")
                return self.rule_based_analysis(text)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ LLM –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return self.rule_based_analysis(text)
    
    def _validate_and_improve_object(self, obj: Dict, original_text: str) -> Dict:
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∏ —É–ª—É—á—à–∞–µ—Ç JSON –æ–±—ä–µ–∫—Ç"""
        required_fields = ['title', 'type', 'description', 'tags', 'priority', 'dueDate']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        for field in required_fields:
            if field not in obj:
                return obj  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç –µ—Å–ª–∏ –Ω–µ –≤—Å–µ –ø–æ–ª—è
        
        # –£–ª—É—á—à–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        text_lower = original_text.lower()
        
        # –£–ª—É—á—à–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if obj['title'] in ['Task', 'Mood', 'Moods', 'Emotional state', '–ó–∞–¥–∞—á–∞']:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            obj['title'] = self._extract_title(original_text, obj['type'])
        
        # –£–ª—É—á—à–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        if len(obj['description']) < 10:
            obj['description'] = f"–í—ã–ø–æ–ª–Ω–∏—Ç—å: {original_text}"
        
        # –£–ª—É—á—à–∞–µ–º —Ç–µ–≥–∏
        if not obj['tags'] or len(obj['tags']) < 2:
            obj['tags'] = self._extract_tags(original_text)
        
        # –£–ª—É—á—à–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        if obj['priority'] not in ['high', 'medium', 'low']:
            obj['priority'] = self._extract_priority(original_text)
        
        # –£–ª—É—á—à–∞–µ–º –¥–∞—Ç—É
        obj['dueDate'] = self._extract_due_date(original_text)
        
        return obj
    
    def find_similar_examples(self, user_input: str) -> List[Dict[str, Any]]:
        """–ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
        similar = []
        input_lower = user_input.lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ—Ä–∞–∑
        for example in self.training_data:
            if 'input' in example:
                example_input = example['input'].lower()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                if input_lower == example_input:
                    return [example]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (80% —Å–ª–æ–≤)
                input_words = set(input_lower.split())
                example_words = set(example_input.split())
                common_words = input_words & example_words
                
                if len(common_words) >= len(input_words) * 0.8:  # 80% —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
                    similar.append(example)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if not similar:
            key_words = ['–æ—Ç—á—ë—Ç', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–∫–æ–¥', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–±–æ—Ç–∞', '–≤—É–∑', '—É—á–µ–±–∞', '–∑–∞–¥–∞—á–∞', '—Å—Ä–æ—á–Ω–æ—Å—Ç—å', '–Ω–∞–ø–∏—Å–∞–Ω–∏–µ']
            
            for example in self.training_data:
                if 'input' in example:
                    example_input = example['input'].lower()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    input_keywords = [word for word in key_words if word in input_lower]
                    example_keywords = [word for word in key_words if word in example_input]
                    
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if input_keywords and example_keywords:
                        common_keywords = set(input_keywords) & set(example_keywords)
                        if len(common_keywords) >= 1:  # –ú–∏–Ω–∏–º—É–º 1 –æ–±—â–∏–π –∫–ª—é—á–µ–≤–æ–π —Ç–µ—Ä–º–∏–Ω
                            similar.append(example)
                            
        return similar[:1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ 1 –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–π –ø—Ä–∏–º–µ—Ä
    
    def analyze_text(self, text: str) -> List[Dict[str, Any]]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ - –≤—ã–±–∏—Ä–∞–µ—Ç –º–µ–∂–¥—É rule-based –∏ LLM"""
        try:
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(text, bytes):
                text = text.decode('utf-8')
            
            print(f"üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: {text[:50]}...")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if self.is_complex_request(text):
                print("üß† –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º LLM")
                return self.llm_analysis(text)
            else:
                print("‚ö° –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º rule-based")
                return self.rule_based_analysis(text)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return [{
                "title": "–ó–∞–¥–∞—á–∞",
                "type": "task", 
                "description": f"–í—ã–ø–æ–ª–Ω–∏—Ç—å: {text}",
                "tags": ["–∑–∞–¥–∞—á–∞"],
                "priority": "medium",
                "dueDate": (self.current_date + timedelta(days=1)).strftime("%Y-%m-%d 18:00")
            }]
    
    def _detect_types(self, text: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã –∑–∞–¥–∞—á –≤ —Ç–µ–∫—Å—Ç–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        detected = set()
        text_lower = text.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
        
        # MOOD_ENTRY - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        mood_patterns = [
            '—á—É–≤—Å—Ç–≤—É—é', '–≤–æ–ª–Ω—É—é—Å—å', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª–∞', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ä–∞–¥–æ—Å—Ç–Ω–æ',
            '–∑–ª–æ–π', '–∑–ª–∞—è', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∞', '—Å–ø–æ–∫–æ–µ–Ω', '—Å–ø–æ–∫–æ–π–Ω–∞', '—Ç—Ä–µ–≤–æ–∂–Ω–æ',
            '–±–µ—Å–ø–æ–∫–æ—é—Å—å', '–Ω–µ—Ä–≤–Ω–∏—á–∞—é', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—ç–º–æ—Ü–∏–∏', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ',
            '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—Ç—Ä–µ—Å—Å', '—Ç—Ä–µ–≤–æ–≥–∞', '–ø–∞–Ω–∏–∫–∞', '—Å—á–∞—Å—Ç—å–µ', '—Ä–∞–¥–æ—Å—Ç—å', '–≤–æ—Å—Ç–æ—Ä–≥',
            '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∞', '–æ–±–∏–∂–µ–Ω', '–æ–±–∏–∂–µ–Ω–∞', '–æ–¥–∏–Ω–æ–∫', '–æ–¥–∏–Ω–æ–∫–∞',
            '–æ—á–µ–Ω—å —Ä–∞–¥—É—é—Å—å', '–≥–æ—Ä–∂—É—Å—å', '–∏—Å–ø—ã—Ç—ã–≤–∞—é', '—Å–∏–ª—å–Ω—É—é —Ç—Ä–µ–≤–æ–≥—É', '–ø–∞–Ω–∏–∫—É',
            '–æ–≥—Ä–æ–º–Ω—É—é –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ –æ—Ç', '–ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥—Ä—É–∑–µ–π', '–≤–æ–ª–Ω—É—é—Å—å –ø–µ—Ä–µ–¥',
            '–≤–∞–∂–Ω—ã–º —ç–∫–∑–∞–º–µ–Ω–æ–º', '–Ω–µ –º–æ–≥—É —É—Å–Ω—É—Ç—å', '–ø—É–±–ª–∏—á–Ω—ã–º –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º'
        ]
        
        # HABIT - –ø—Ä–∏–≤—ã—á–∫–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        habit_patterns = [
            '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', '–ø—Ä–∏–≤—ã—á–∫–∞', '–ø—Ä–∏–≤—ã–∫', '–Ω–∞—á–∏–Ω–∞—é',
            '—Ö–æ—á—É –Ω–∞—á–∞—Ç—å', '–ø–ª–∞–Ω–∏—Ä—É—é –Ω–∞—á–∞—Ç—å', '–±—É–¥—É –¥–µ–ª–∞—Ç—å', '–∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ', '–∫–∞–∂–¥—ã–π –≤–µ—á–µ—Ä',
            '–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é', '–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '–∑–∞—Ä—è–¥–∫–∞', '–±–µ–≥', '–±–µ–≥–∞—Ç—å',
            '—á–∏—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', '–∏–∑—É—á–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', '—É—á–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', 
            '–ø—Ä–∞–∫—Ç–∏–∫–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å', '–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å', '–π–æ–≥–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å',
            '—Å–ø–æ—Ä—Ç', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è', '–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–ø–æ—Ä—Ç–æ–º'
        ]
        
        # GOAL - –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏
        goal_patterns = [
            '—Ö–æ—á—É —Å–æ–∑–¥–∞—Ç—å', '—Ö–æ—á—É –æ—Ç–∫—Ä—ã—Ç—å', '—Ö–æ—á—É —Å—Ç–∞—Ç—å', '—Ö–æ—á—É –¥–æ—Å—Ç–∏—á—å', '—Ü–µ–ª—å',
            '–º–µ—á—Ç–∞—é', '–ø–ª–∞–Ω–∏—Ä—É—é', '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–≤ –±—É–¥—É—â–µ–º', '—á–µ—Ä–µ–∑ –≥–æ–¥', '—á–µ—Ä–µ–∑ 5 –ª–µ—Ç',
            '—Å—Ç–∞—Ä—Ç–∞–ø', '–±–∏–∑–Ω–µ—Å', '–∫–∞—Ä—å–µ—Ä–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–Ω–∞–≤—ã–∫', '–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ',
            '–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ', '–∞–º–±–∏—Ü–∏–∏', '—Å—Ç—Ä–µ–º–ª–µ–Ω–∏–µ', '–∂–µ–ª–∞–Ω–∏–µ', '–Ω–∞–º–µ—Ä–µ–Ω–∏–µ',
            '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å', '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –∏–∑—É—á–∏—Ç—å', '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–∞—É—á–∏—Ç—å—Å—è',
            '–≤ –±—É–¥—É—â–µ–º —Ö–æ—á—É', '–≤ –±—É–¥—É—â–µ–º –ø–ª–∞–Ω–∏—Ä—É—é', '—á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç',
            '—Ö–æ—á—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ', '–∏–∑—É—á–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –∫—É–ª—å—Ç—É—Ä—ã',
            '—Å—Ç–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º', '–º–µ—á—Ç–∞—é —Å—Ç–∞—Ç—å'
        ]
        
        # TASK - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏
        task_patterns = [
            '–Ω—É–∂–Ω–æ', '–¥–æ–ª–∂–µ–Ω', '–¥–æ–ª–∂–Ω–∞', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', '—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ',
            '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–æ—Ç—á–µ—Ç', '–¥–æ–∫—É–º–µ–Ω—Ç', '–ø–∏—Å—å–º–æ', '–∑–≤–æ–Ω–æ–∫',
            '–ø–æ–∫—É–ø–∫–∏', '–º–∞–≥–∞–∑–∏–Ω', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–µ–¥–∞', '–ª–µ–∫–∞—Ä—Å—Ç–≤–∞', '–∞–ø—Ç–µ–∫–∞',
            '–≤—Ä–∞—á', '–±–æ–ª—å–Ω–∏—Ü–∞', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–∑–¥–æ—Ä–æ–≤—å–µ',
            '—Ä–∞–±–æ—Ç–∞', '–æ—Ñ–∏—Å', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á–∞', '–¥–µ–ª–æ', '–ø–ª–∞–Ω',
            '—É—á–µ–±–∞', '—ç–∫–∑–∞–º–µ–Ω', '–∫—É—Ä—Å', '–ª–µ–∫—Ü–∏—è', '—Å–µ–º–∏–Ω–∞—Ä', '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è',
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–ø–æ–µ–∑–¥–∫–∞', '–æ—Ç–ø—É—Å–∫', '–±–∏–ª–µ—Ç—ã', '–æ—Ç–µ–ª—å', '–≤–∏–∑–∞',
            '—Ä–µ–º–æ–Ω—Ç', '—É–±–æ—Ä–∫–∞', '—Å—Ç–∏—Ä–∫–∞', '–≥–æ—Ç–æ–≤–∫–∞', '–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        
        # 0. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        if '–∏–∑—É—á–∏—Ç—å' in text_lower and ('—è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è' in text_lower or 'python' in text_lower or 'javascript' in text_lower):
            return ['habit']
        if '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å' in text_lower and ('–ø—Ä–æ—á–∏—Ç–∞—Ç—å' in text_lower or '–ø—Ä–æ—á–µ—Å—Ç—å' in text_lower):
            return ['goal']
        if '–≤–∞–∂–Ω–æ –∏–∑—É—á–∏—Ç—å' in text_lower and '—è–∑—ã–∫' in text_lower:
            return ['habit']
        if '–ø–ª–∞–Ω–∏—Ä—É—é –∏–∑—É—á–∏—Ç—å' in text_lower and ('—Ñ—Ä–µ–π–º–≤–æ—Ä–∫' in text_lower or '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é' in text_lower):
            return ['habit']
        if '—Ö–æ—á—É –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' in text_lower or '–ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' in text_lower:
            return ['goal']
        if '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é' in text_lower or '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ' in text_lower:
            return ['task']
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        for pattern in task_patterns:
            if pattern in text_lower:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —ç–º–æ—Ü–∏–∏, –∏ –∑–∞–¥–∞—á–∏ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∞–º
                if any(p in text_lower for p in mood_patterns):
                    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —ç–º–æ—Ü–∏–π –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º
                    if '–æ—á–µ–Ω—å –Ω–µ—Ä–≤–Ω–∏—á–∞—é' in text_lower and '—ç–∫–∑–∞–º–µ–Ω' in text_lower:
                        return ['mood_entry']  # –≠–º–æ—Ü–∏–∏ –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º = –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                    return ['task']  # –°–º–µ—à–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å = –∑–∞–¥–∞—á–∞
                return ['task']
        
        # 2. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–¥–∞—á)
        for pattern in mood_patterns:
            if pattern in text_lower:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                if '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ' in text_lower:
                    return ['task']  # –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è = –∑–∞–¥–∞—á–∏
                elif '—ç–∫–∑–∞–º–µ–Ω' in text_lower and ('–æ—á–µ–Ω—å –Ω–µ—Ä–≤–Ω–∏—á–∞—é' in text_lower or '–≤–æ–ª–Ω—É—é—Å—å' in text_lower):
                    return ['mood_entry']  # –≠–º–æ—Ü–∏–∏ –ø–µ—Ä–µ–¥ —ç–∫–∑–∞–º–µ–Ω–æ–º = –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
                return ['mood_entry']
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—ã—á–∫–∏
        for pattern in habit_patterns:
            if pattern in text_lower:
                return ['habit']
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏
        for pattern in goal_patterns:
            if pattern in text_lower:
                return ['goal']
        
        # 5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        if '–∏' in text_lower and len(text.split()) > 5:
            # –°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∏–ø–æ–≤
            types = []
            if any(p in text_lower for p in mood_patterns):
                types.append('mood_entry')
            if any(p in text_lower for p in habit_patterns):
                types.append('habit')
            if any(p in text_lower for p in goal_patterns):
                types.append('goal')
            if any(p in text_lower for p in task_patterns):
                types.append('task')
            
            if types:
                return types[:2]  # –ú–∞–∫—Å–∏–º—É–º 2 —Ç–∏–ø–∞ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–¥–∞—á–∞
        return ['task']
    
    def _create_object(self, text: str, task_type: str) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        obj = {
            "title": self._extract_title(text, task_type),
            "type": task_type,
            "description": self._extract_description(text, task_type),
            "tags": self._extract_tags(text),
            "priority": self._extract_priority(text),
            "dueDate": self._extract_due_date(text)
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞–µ–º –æ–±—ä–µ–∫—Ç
        improved_obj = self._validate_and_improve_object(obj, text)
        return improved_obj if improved_obj else obj
    
    def _extract_title(self, text: str, task_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        text_lower = text.lower()
        print(f"üîç DEBUG: –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è '{text}' —Ç–∏–ø–∞ '{task_type}'")
        
        if task_type == 'task':
            if '–æ—Ç—á—ë—Ç' in text_lower and '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' in text_lower:
                print(f"‚úÖ DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ '–æ—Ç—á—ë—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'")
                return "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é"
            elif '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower and '–∏–Ω–≤–µ—Å—Ç–æ—Ä' in text_lower:
                return "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤"
            elif '–æ—Ç—á—ë—Ç' in text_lower and '–Ω–∞—á–∞–ª—å–Ω–∏–∫' in text_lower:
                return "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é"
            elif '–æ—Ç—á–µ—Ç' in text_lower and '–Ω–∞—á–∞–ª—å–Ω–∏–∫' in text_lower:
                return "–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é"
            elif '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower and '–∫–ª–∏–µ–Ω—Ç' in text_lower:
                return "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"
            elif '–ø—Ä–æ–¥—É–∫—Ç' in text_lower or '–º–∞–≥–∞–∑–∏–Ω' in text_lower:
                return "–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
            elif '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower and '–≤—É–∑' in text_lower:
                return "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –≤—É–∑—É"
            elif '–∫–æ–¥' in text_lower and '—Ä–∞–±–æ—Ç–∞' in text_lower:
                return "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–¥–∞ –ø–æ —Ä–∞–±–æ—Ç–µ"
            elif '–≤—Å—Ç—Ä–µ—á–∞' in text_lower and '–∫–æ–º–∞–Ω–¥–∞' in text_lower:
                return "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π"
            elif '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ' in text_lower:
                return "–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
            elif '–ø–µ—Ä–µ–µ–∑–¥' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—Ä–µ–µ–∑–¥—É"
            elif '–æ–ø–µ—Ä–∞—Ü–∏—è' in text_lower and '–º–∞–º–∞' in text_lower:
                return "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–∞–º—ã –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏"
            elif '–≤—Ä–∞—á' in text_lower or '–±–æ–ª—å–Ω–∏—Ü–∞' in text_lower:
                return "–í–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É"
            elif '–≤—Å—Ç—Ä–µ—á–∞' in text_lower and '–∫–ª–∏–µ–Ω—Ç' in text_lower:
                return "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º"
            elif '–æ—Ç—á—ë—Ç' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á—ë—Ç–∞"
            elif '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"
            elif '–≤—Å—Ç—Ä–µ—á–∞' in text_lower:
                return "–í—Å—Ç—Ä–µ—á–∞"
            elif '–∑–≤–æ–Ω–æ–∫' in text_lower:
                return "–ó–≤–æ–Ω–æ–∫"
            elif '–ø–∏—Å—å–º–æ' in text_lower:
                return "–ù–∞–ø–∏—Å–∞–Ω–∏–µ –ø–∏—Å—å–º–∞"
            elif '–¥–æ–∫—É–º–µ–Ω—Ç' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞"
            elif '–ø–æ–∫—É–ø–∫–∏' in text_lower:
                return "–ü–æ–∫—É–ø–∫–∏"
            elif '—Ä–µ–º–æ–Ω—Ç' in text_lower:
                return "–†–µ–º–æ–Ω—Ç"
            elif '—É–±–æ—Ä–∫–∞' in text_lower:
                return "–£–±–æ—Ä–∫–∞"
            elif '–≥–æ—Ç–æ–≤–∫–∞' in text_lower:
                return "–ì–æ—Ç–æ–≤–∫–∞"
            elif '—Å—Ç–∏—Ä–∫–∞' in text_lower:
                return "–°—Ç–∏—Ä–∫–∞"
            elif '—ç–∫–∑–∞–º–µ–Ω' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω—É"
            elif '–∫—É—Ä—Å' in text_lower:
                return "–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞"
            elif '–ª–µ–∫—Ü–∏—è' in text_lower:
                return "–ü–æ—Å–µ—â–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–∏"
            elif '–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è' in text_lower:
                return "–£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏"
            elif '–æ—Ç–ø—É—Å–∫' in text_lower:
                return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞"
            elif '–ø–æ–µ–∑–¥–∫–∞' in text_lower:
                return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏"
            elif '–±–∏–ª–µ—Ç—ã' in text_lower:
                return "–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–æ–≤"
            elif '–æ—Ç–µ–ª—å' in text_lower:
                return "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è"
            elif '–≤–∏–∑–∞' in text_lower:
                return "–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≤–∏–∑—ã"
            else:
                # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
                words = text.split()
                if len(words) >= 3:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2-3 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤–∞
                    key_words = []
                    for word in words[:5]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–ª–æ–≤
                        if len(word) > 3 and word.lower() not in ['–Ω—É–∂–Ω–æ', '–¥–æ–ª–∂–µ–Ω', '–¥–æ–ª–∂–Ω–∞', '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ', '—Å—Ä–æ—á–Ω–æ', '–≤–∞–∂–Ω–æ', '–∑–∞–≤—Ç—Ä–∞', '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è']:
                            key_words.append(word)
                            if len(key_words) >= 2:
                                break
                    
                    if key_words:
                        return " ".join(key_words).title()
                
                print(f"‚ö†Ô∏è DEBUG: –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '–ó–∞–¥–∞—á–∞'")
                return "–ó–∞–¥–∞—á–∞"
        elif task_type == 'mood_entry':
            if '–≤–æ–ª–Ω—É—é—Å—å' in text_lower or '–ø–µ—Ä–µ–∂–∏–≤–∞—é' in text_lower or '—Å—Ç—Ä–µ—Å—Å' in text_lower:
                return "–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
            elif '—É—Å—Ç–∞–ª' in text_lower or '—É—Å—Ç–∞–ª—ã–º' in text_lower or '—É—Å—Ç–∞–ª–æ—Å—Ç—å' in text_lower:
                return "–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏"
            elif '–æ—Ç–ª–∏—á–Ω–æ' in text_lower or '—Ö–æ—Ä–æ—à–æ' in text_lower:
                return "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
            elif '–≥—Ä—É—Å—Ç–Ω–æ' in text_lower or '–ø–ª–æ—Ö–æ' in text_lower:
                return "–ü–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
            elif '—Ç—Ä–µ–≤–æ–≥–∞' in text_lower or '–±–µ—Å–ø–æ–∫–æ—é—Å—å' in text_lower:
                return "–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ–≤–æ–≥–∏"
            else:
                return "–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
        elif task_type == 'habit':
            if '–±–µ–≥–∞—Ç—å' in text_lower:
                return "–£—Ç—Ä–µ–Ω–Ω–∏–π –±–µ–≥"
            elif '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å' in text_lower or 'python' in text_lower or '–∏–∑—É—á–∞—Ç—å' in text_lower:
                return "–ò–∑—É—á–µ–Ω–∏–µ Python"
            elif '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' in text_lower or '—è–∑—ã–∫' in text_lower:
                return "–ò–∑—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞"
            elif '—á–∏—Ç–∞—Ç—å' in text_lower:
                return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ"
            elif '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞' in text_lower or '—Å–ø–æ—Ä—Ç' in text_lower:
                return "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
            elif '–º–µ–¥–∏—Ç–∏—Ä–æ–≤–∞—Ç—å' in text_lower or '–π–æ–≥–∞' in text_lower:
                return "–ú–µ–¥–∏—Ç–∞—Ü–∏—è"
            else:
                return "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        elif task_type == 'goal':
            if '—Å—Ç–∞—Ä—Ç–∞–ø' in text_lower or '–±–∏–∑–Ω–µ—Å' in text_lower or '–æ—Ç–∫—Ä—ã—Ç—å' in text_lower:
                return "–û—Ç–∫—Ä—ã—Ç–∏–µ –±–∏–∑–Ω–µ—Å–∞"
            elif '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' in text_lower:
                return "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            elif '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ' in text_lower:
                return "–°—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º"
            elif '—Ç–æ–∫–∏–æ' in text_lower:
                return "–ü–µ—Ä–µ–µ–∑–¥ –≤ –¢–æ–∫–∏–æ"
            elif '–∫–∞—Ä—å–µ—Ä–∞' in text_lower or '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è' in text_lower:
                return "–†–∞–∑–≤–∏—Ç–∏–µ –∫–∞—Ä—å–µ—Ä—ã"
            elif '–Ω–∞–≤—ã–∫' in text_lower or '–º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ' in text_lower:
                return "–†–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤"
            elif '–¥–æ–º' in text_lower or '–∫–≤–∞—Ä—Ç–∏—Ä–∞' in text_lower:
                return "–ü–æ–∫—É–ø–∫–∞ –∂–∏–ª—å—è"
            elif '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ' in text_lower or '–ø–æ–µ–∑–¥–∫–∞' in text_lower:
                return "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
            else:
                return "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è —Ü–µ–ª—å"
        
        return "–ó–∞–ø–∏—Å—å"
    
    def _extract_description(self, text: str, task_type: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        text_lower = text.lower()
        
        if task_type == 'task':
            if '–æ—Ç—á—ë—Ç' in text_lower and '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"
            elif '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower and '–∏–Ω–≤–µ—Å—Ç–æ—Ä' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ–ø–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –¥–ª—è –≤–∞–∂–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞–º–∏"
            elif '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower and '–∫–ª–∏–µ–Ω—Ç' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–µ–ø–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –¥–ª—è –≤–∞–∂–Ω–æ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É"
            elif '–ø—Ä–æ–¥—É–∫—Ç' in text_lower or '–º–∞–≥–∞–∑–∏–Ω' in text_lower:
                return "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –∏ –∫—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –Ω–µ–¥–µ–ª—é"
            elif '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower and '–≤—É–∑' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –≤—É–∑—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"
            elif '–∫–æ–¥' in text_lower and '—Ä–∞–±–æ—Ç–∞' in text_lower:
                return "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∫–æ–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã"
            elif '–≤—Å—Ç—Ä–µ—á–∞' in text_lower and '–∫–æ–º–∞–Ω–¥–∞' in text_lower:
                return "–ü—Ä–æ–≤–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É —Å –∫–æ–º–∞–Ω–¥–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞"
            elif '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ' in text_lower:
                return "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é –∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –æ–¥–µ–∂–¥—É"
            elif '–ø–µ—Ä–µ–µ–∑–¥' in text_lower:
                return "–£–ø–∞–∫–æ–≤–∞—Ç—å –≤–µ—â–∏ –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è —Å –≥—Ä—É–∑—á–∏–∫–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞"
            elif '–æ–ø–µ—Ä–∞—Ü–∏—è' in text_lower and '–º–∞–º–∞' in text_lower:
                return "–ë—ã—Ç—å —Ä—è–¥–æ–º —Å –º–∞–º–æ–π –≤–æ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            else:
                return f"–í—ã–ø–æ–ª–Ω–∏—Ç—å: {text}"
        elif task_type == 'mood_entry':
            if '–≤–æ–ª–Ω—É—é—Å—å' in text_lower or '–ø–µ—Ä–µ–∂–∏–≤–∞—é' in text_lower:
                return "–ò—Å–ø—ã—Ç—ã–≤–∞—é —Å–∏–ª—å–Ω–æ–µ –≤–æ–ª–Ω–µ–Ω–∏–µ –∏ —Ç—Ä–µ–≤–æ–≥—É"
            elif '—É—Å—Ç–∞–ª' in text_lower or '—É—Å—Ç–∞–ª—ã–º' in text_lower:
                return "–ò—Å–ø—ã—Ç—ã–≤–∞—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –Ω—É–∂–¥–∞—é—Å—å –≤ –æ—Ç–¥—ã—Ö–µ"
            elif '–æ—Ç–ª–∏—á–Ω–æ' in text_lower:
                return "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ, –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ø–æ–∑–∏—Ç–∏–≤–∞"
            else:
                return "–ó–∞–ø–∏—Å—å –æ —Ç–µ–∫—É—â–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
        elif task_type == 'habit':
            if '–±–µ–≥–∞—Ç—å' in text_lower:
                return "–†–µ–≥—É–ª—è—Ä–Ω–æ –±–µ–≥–∞—Ç—å –∫–∞–∂–¥–æ–µ —É—Ç—Ä–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã"
            elif '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å' in text_lower:
                return "–†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤"
            elif '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π' in text_lower or '—è–∑—ã–∫' in text_lower:
                return "–†–µ–≥—É–ª—è—Ä–Ω–æ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –Ω–∞–≤—ã–∫–æ–≤"
            elif '—á–∏—Ç–∞—Ç—å' in text_lower:
                return "–†–µ–≥—É–ª—è—Ä–Ω–æ —á–∏—Ç–∞—Ç—å –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —Å–∞–º–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"
            else:
                return "–†–∞–∑–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É"
        elif task_type == 'goal':
            if '—Å—Ç–∞—Ä—Ç–∞–ø' in text_lower:
                return "–°–æ–∑–¥–∞—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø –≤ —Å—Ñ–µ—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"
            elif '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' in text_lower:
                return "–°–æ–∑–¥–∞—Ç—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º"
            elif '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ' in text_lower:
                return "–°—Ç–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–æ–º –∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Å—Ç—É–¥–∏—é"
            elif '—Ç–æ–∫–∏–æ' in text_lower:
                return "–í—ã—É—á–∏—Ç—å —è–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫ –∏ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –≤ –¢–æ–∫–∏–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏"
            else:
                return "–î–æ—Å—Ç–∏—á—å –≤–∞–∂–Ω–æ–π –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Ü–µ–ª–∏"
        
        return f"–û–ø–∏—Å–∞–Ω–∏–µ: {text}"
    
    def _extract_tags(self, text: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–≥–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–∏–º–µ—Ä—ã
        similar_examples = self.find_similar_examples(text)
        
        for example in similar_examples:
            if 'expected' in example and isinstance(example['expected'], list):
                for item in example['expected']:
                    if 'tags' in item and isinstance(item['tags'], list):
                        return item['tags']
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        tags = []
        text_lower = text.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–≥–æ–≤
        tag_mappings = {
            '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '–æ—Ñ–∏—Å', '–∫–æ–ª–ª–µ–≥–∏', '–ø—Ä–æ–µ–∫—Ç', '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∫–ª–∏–µ–Ω—Ç', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–∫–∞—Ä—å–µ—Ä–∞', '–±–∏–∑–Ω–µ—Å', '–æ—Ç—á—ë—Ç', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å', '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–∫–æ–º–∞–Ω–¥–∞', '—Å–æ–≤–µ—â–∞–Ω–∏–µ', '–∏–Ω—Ç–µ—Ä–≤—å—é', '–∫–∞–Ω–¥–∏–¥–∞—Ç', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–æ–¥–∞–∂–∏', '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', 'google'],
            '—Å–µ–º—å—è': ['—Å–µ–º—å—è', '–¥–µ—Ç–∏', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏', '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏', '–º–∞–º–∞', '–ø–∞–ø–∞', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è', '—Å–≤–∞–¥—å–±–∞', '–º–æ–ª–æ–¥–æ–∂–µ–Ω—ã'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–≤—Ä–∞—á', '–ª–µ–∫–∞—Ä—Å—Ç–≤–æ', '–±–æ–ª—å–Ω–∏—Ü–∞', '—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª—ã–º', '–ø–æ–¥–∞–≤–ª–µ–Ω', '—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–ª–µ—á–µ–Ω–∏–µ', '–ø–æ—Ö—É–¥–µ—Ç—å', '–¥–∏–µ—Ç–∞', '–±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å', '—É—Å—Ç–∞–ª–æ—Å—Ç—å', '–æ–ø–µ—Ä–∞—Ü–∏—è'],
            '—Å–ø–æ—Ä—Ç': ['—Å–ø–æ—Ä—Ç', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', '—Ñ–∏—Ç–Ω–µ—Å', '–∑–∞–ª', '–±–µ–≥–∞—Ç—å', '–±–µ–≥', '–±–µ–≥–æ–≤–∞—è', '—É—Ç—Ä–µ–Ω–Ω–∏–π –±–µ–≥', '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è', '—Ñ–∏–∑–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º–∞'],
            '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': ['–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '—Å–∞–π—Ç', '–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ', 'IT', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'],
            '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ': ['–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—á—É–≤—Å—Ç–≤—É—é', '—ç–º–æ—Ü–∏–∏', '–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–ª–æ—Ö–æ', '–≤–æ–ª–Ω—É—é—Å—å', '–Ω–µ—Ä–≤–Ω–∏—á–∞—é', '–ª—é–±–ª—é', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '—Ç—Ä–µ–≤–æ–≥–∞', '—Å—Ç—Ä–µ—Å—Å'],
            '—É—á–µ–±–∞': ['—É—á–µ–±–∞', '—ç–∫–∑–∞–º–µ–Ω', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∏–∑—É—á–∞—Ç—å', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '–ª–µ–∫—Ü–∏—è', '–∏—Å–ø–∞–Ω—Å–∫–∏–π', '—è–∑—ã–∫', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–≤—É–∑', '–º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π', '—è–ø–æ–Ω—Å–∫–∏–π'],
            '–ø–æ–∫—É–ø–∫–∏': ['–ø–æ–∫—É–ø–∫–∏', '–∫—É–ø–∏—Ç—å', '–º–∞–≥–∞–∑–∏–Ω', '—Ç–æ–≤–∞—Ä', '–ø—Ä–æ–¥—É–∫—Ç', '–ø—Ä–æ–¥—É–∫—Ç—ã', '–∫–æ—Å—Ç—é–º', '–ø–æ–¥–∞—Ä–æ–∫', '—Ü–≤–µ—Ç—ã', '—Ç–æ—Ä—Ç', '–º–µ–±–µ–ª—å', '–±–∏–ª–µ—Ç—ã'],
            '–¥–æ–º': ['–¥–æ–º', '–∫–≤–∞—Ä—Ç–∏—Ä–∞', '–ø–µ—Ä–µ–µ–∑–¥', '–º–µ–±–µ–ª—å', '–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', '–≥—Ä—É–∑—á–∏–∫–∏'],
            '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–æ—Ç–ø—É—Å–∫', '–ï–≤—Ä–æ–ø–∞', '–æ—Ç–µ–ª—å', '–≤–∏–∑–∞', '—Å–∞–º–æ–ª–µ—Ç', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–≥–æ—Ä—ã', '–ø–æ—Ö–æ–¥', '–ø–æ—Ö–æ–¥ –≤ –≥–æ—Ä—ã', '—Ç–æ–∫–∏–æ'],
            '—Ö–æ–±–±–∏': ['—Ö–æ–±–±–∏', '–≥–∏—Ç–∞—Ä–∞', '–º—É–∑—ã–∫–∞', '–∏–≥—Ä–∞—Ç—å', '–∑–∞–Ω—è—Ç–∏—è'],
            '–∫—Ä–∞—Å–æ—Ç–∞': ['–∫—Ä–∞—Å–æ—Ç–∞', '–º–∞–Ω–∏–∫—é—Ä', '–º–∞—Å—Å–∞–∂', '—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ', '—É—Ö–æ–¥'],
            '–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è': ['–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', '—É–ø–∞–∫–æ–≤–∫–∞', '–≤–µ—â–∏', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞'],
            '–¥–∏–∑–∞–π–Ω': ['–¥–∏–∑–∞–π–Ω', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', 'ui', 'ux', '–≥—Ä–∞—Ñ–∏–∫–∞', '–≤–∏–∑—É–∞–ª'],
            '–ø–æ–¥–∞—Ä–∫–∏': ['–ø–æ–¥–∞—Ä–∫–∏', '–ø–æ–¥–∞—Ä–æ–∫', '–ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Å—é—Ä–ø—Ä–∏–∑'],
            '–Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ': ['–Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ', '–Ω–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞', '–∞–¥–∞–ø—Ç–∞—Ü–∏—è', '–∫–æ–ª–ª–µ–∫—Ç–∏–≤'],
            '–∫—É–ª–∏–Ω–∞—Ä–∏—è': ['–∫—É–ª–∏–Ω–∞—Ä–∏—è', '–≥–æ—Ç–æ–≤–∫–∞', '—Ä–µ—Ü–µ–ø—Ç—ã', '—à–µ—Ñ-–ø–æ–≤–∞—Ä', '–∫—É—Ö–Ω—è'],
            '–º—É–∑—ã–∫–∞': ['–º—É–∑—ã–∫–∞', '–ø–∏–∞–Ω–∏–Ω–æ', '–≥–∏—Ç–∞—Ä–∞', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–º–µ–ª–æ–¥–∏—è'],
            '–æ—Ç—á—ë—Ç': ['–æ—Ç—á—ë—Ç', '–æ—Ç—á—ë—Ç—ã', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç', '—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å'],
            '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è': ['–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏', '–∫–ª–∏–µ–Ω—Ç', '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è', '–∏–Ω–≤–µ—Å—Ç–æ—Ä—ã'],
            '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã': ['–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', '–ø–æ—Å—Ç–∞–≤—â–∏–∫', '–æ–±—Å—É–∂–¥–µ–Ω–∏–µ', '—É—Å–ª–æ–≤–∏—è'],
            '—Å–æ–≤–µ—â–∞–Ω–∏–µ': ['—Å–æ–≤–µ—â–∞–Ω–∏–µ', '–∫–æ–º–∞–Ω–¥–∞', '–≤—Å—Ç—Ä–µ—á–∞ –∫–æ–º–∞–Ω–¥—ã'],
            '—Å–∏—Å—Ç–µ–º–∞': ['—Å–∏—Å—Ç–µ–º–∞', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ', '–ø—Ä–æ–≤–µ—Ä–∫–∞'],
            '–ø—Ä–æ–µ–∫—Ç': ['–ø—Ä–æ–µ–∫—Ç', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ', '—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'],
            'hr': ['hr', '–∏–Ω—Ç–µ—Ä–≤—å—é', '–∫–∞–Ω–¥–∏–¥–∞—Ç', '–Ω–∞–π–º'],
            'qa': ['qa', '—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ', '–±–∞–≥–∏', '–ø—Ä–æ–≤–µ—Ä–∫–∞'],
            '–ø—Ä–æ–¥–∞–∂–∏': ['–ø—Ä–æ–¥–∞–∂–∏', '–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–∫–ª–∏–µ–Ω—Ç', '—Ä–∞—Å—Ü–µ–Ω–∫–∏'],
            '—Å—Ç–∞—Ä—Ç–∞–ø': ['—Å—Ç–∞—Ä—Ç–∞–ø', '—Å—Ç–∞—Ä—Ç–∞–ø—ã', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'MVP', '—Å–æ—É—á—Ä–µ–¥–∏—Ç–µ–ª—å'],
            '–º–µ–¥–∏—Ç–∞—Ü–∏—è': ['–º–µ–¥–∏—Ç–∞—Ü–∏—è', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'wellness', '–∑–¥–æ—Ä–æ–≤—å–µ'],
            '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è': ['—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ', '—Å—Ç—É–¥–∏—è', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'],
            '–ø—Ä–∏–≤—ã—á–∫–∞': ['–ø—Ä–∏–≤—ã—á–∫–∞', '–ø—Ä–∏–≤—ã—á–∫–∏', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ', '–µ–∂–µ–¥–Ω–µ–≤–Ω–æ', '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å']
        }
        
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for tag, keywords in tag_mappings.items():
            for keyword in keywords:
                if keyword in text_lower:
                    if tag not in tags:
                        tags.append(tag)
                    break
        
        # –ï—Å–ª–∏ —Ç–µ–≥–æ–≤ –º–∞–ª–æ, –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if len(tags) < 2:
            if '–∑–∞–≤—Ç—Ä–∞' in text_lower or '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in text_lower:
                if '–∑–∞–¥–∞—á–∞' not in tags:
                    tags.append('–∑–∞–¥–∞—á–∞')
            if '—Ö–æ—á—É' in text_lower or '–Ω–∞—á–Ω—É' in text_lower:
                if '–ø—Ä–∏–≤—ã—á–∫–∞' not in tags:
                    tags.append('–ø—Ä–∏–≤—ã—á–∫–∞')
            if '—á—É–≤—Å—Ç–≤—É—é' in text_lower or '–≤–æ–ª–Ω—É—é—Å—å' in text_lower:
                if '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' not in tags:
                    tags.append('–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')
        
        return tags[:4] if tags else ["–∑–∞–¥–∞—á–∞"]  # –ú–∞–∫—Å–∏–º—É–º 4 —Ç–µ–≥–∞
    
    def _extract_priority(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        text_lower = text.lower()
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        priority_keywords = {
            'low': ['–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å', '–Ω–µ —Å–ø–µ—à–∞', '–≤ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è', '—Å—Ä–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è', '–Ω–µ–≤–∞–∂–Ω–æ', '–Ω–µ –≤–∞–∂–Ω–æ', '–Ω–µ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ', '–≤ –±—É–¥—É—â–µ–º', '–º–µ—á—Ç–∞—é', '–º–µ—á—Ç–∞—é —Å—Ç–∞—Ç—å'],
            'high': ['—Å—Ä–æ—á–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', '–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è', '–Ω–µ–æ—Ç–ª–æ–∂–Ω–æ', '—Å—Ä–æ—á–Ω–∞—è', '–≤–∞–∂–Ω–æ', '–≤–∞–∂–Ω–∞—è', '–∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ', '–∫—Ä–∏—Ç–∏—á–Ω–æ –≤–∞–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å', '–Ω—É–∂–Ω–æ', '–Ω–∞–¥–æ', '—Ç—Ä–µ–±—É–µ—Ç—Å—è', '–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å', '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å', '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è'],
            'medium': ['–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ', '–≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è', '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–æ—Ç—á—ë—Ç', '—Ö–æ—á—É', '–ø–ª–∞–Ω–∏—Ä—É—é', '–∏–∑—É—á–∏—Ç—å', '—Ñ—Ä–µ–π–º–≤–æ—Ä–∫', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å']
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for priority, keywords in priority_keywords.items():
            for keyword in keywords:
                if keyword in text_lower:
                    return priority
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
        if '—Å—Ä–æ—á–Ω–æ' in text_lower or '–∫—Ä–∏—Ç–∏—á–Ω–æ' in text_lower:
            return 'high'
        elif '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å' in text_lower or '–Ω–µ —Å–ø–µ—à–∞' in text_lower or '–≤ –±—É–¥—É—â–µ–º' in text_lower:
            return 'low'
        elif '–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' in text_lower or '–±—É–¥–∏–ª—å–Ω–∏–∫' in text_lower:
            return 'high'  # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –±—É–¥–∏–ª—å–Ω–∏–∫–∏ = high –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç' in text_lower or '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç' in text_lower:
            return 'medium'  # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ = medium –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–∑–∞–≤—Ç—Ä–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å' in text_lower:
            return 'medium'  # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≤—Ç—Ä–∞ = medium
        elif '–Ω—É–∂–Ω–æ' in text_lower and '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å' in text_lower:
            return 'medium'  # –û–±—ã—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ = medium
        elif '–∏–∑—É—á–∏—Ç—å' in text_lower and ('—Ñ—Ä–µ–π–º–≤–æ—Ä–∫' in text_lower or '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é' in text_lower):
            return 'medium'  # –ò–∑—É—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π = medium –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–ø–ª–∞–Ω–∏—Ä—É—é –∏–∑—É—á–∏—Ç—å' in text_lower or ('–ø–ª–∞–Ω–∏—Ä—É—é' in text_lower and '–∏–∑—É—á–∏—Ç—å' in text_lower):
            return 'medium'  # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑—É—á–µ–Ω–∏—è = medium –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–≤–æ–ª–Ω—É—é—Å—å' in text_lower or '—Ç—Ä–µ–≤–æ–≥–∞' in text_lower or '–ø–∞–Ω–∏–∫–∞' in text_lower or '–Ω–µ—Ä–≤–Ω–∏—á–∞—é' in text_lower:
            return 'high'  # –¢—Ä–µ–≤–æ–≥–∞ –∏ –ø–∞–Ω–∏–∫–∞ = high –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–≤–æ–ª–Ω—É—é—Å—å –ø–µ—Ä–µ–¥' in text_lower or '–Ω–µ –º–æ–≥—É —É—Å–Ω—É—Ç—å' in text_lower:
            return 'high'  # –°–∏–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞ = high –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–∏—Å–ø—ã—Ç—ã–≤–∞—é —Å–∏–ª—å–Ω—É—é' in text_lower and ('—Ç—Ä–µ–≤–æ–≥—É' in text_lower or '–ø–∞–Ω–∏–∫—É' in text_lower):
            return 'high'  # –°–∏–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞/–ø–∞–Ω–∏–∫–∞ = high –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–æ—á–µ–Ω—å –Ω–µ—Ä–≤–Ω–∏—á–∞—é' in text_lower or '–æ—á–µ–Ω—å –≤–æ–ª–Ω—É—é—Å—å' in text_lower:
            return 'high'  # –°–∏–ª—å–Ω–æ–µ –≤–æ–ª–Ω–µ–Ω–∏–µ = high –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ' in text_lower:
            return 'high'  # –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è = high –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '–≤–∞–∂–Ω–æ' in text_lower and ('–≤—Å—Ç—Ä–µ—á–∞' in text_lower or '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower):
            return 'high'  # –í–∞–∂–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ = high
        elif '–≤–∞–∂–Ω–∞—è' in text_lower and ('–≤—Å—Ç—Ä–µ—á–∞' in text_lower or '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower):
            return 'high'  # –í–∞–∂–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ = high
        elif '–≤–∞–∂–Ω–æ' in text_lower and ('–ø—Ä–æ–µ–∫—Ç' in text_lower or '–¥–µ–¥–ª–∞–π–Ω' in text_lower):
            return 'high'  # –í–∞–∂–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º = high
        elif '–¥–æ 12:00' in text_lower or '–¥–æ 12' in text_lower:
            return 'high'  # –ó–∞–¥–∞—á–∏ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –¥–æ –ø–æ–ª—É–¥–Ω—è = high
        elif '–ø—Ä–æ–µ–∫—Ç' in text_lower and ('–¥–æ' in text_lower or '–¥–µ–¥–ª–∞–π–Ω' in text_lower):
            return 'high'  # –ü—Ä–æ–µ–∫—Ç—ã —Å –¥–µ–¥–ª–∞–π–Ω–æ–º = high
        elif '–Ω—É–∂–Ω–æ' in text_lower and ('–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å' in text_lower or '–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å' in text_lower):
            return 'high'  # –í–∞–∂–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ = high
        elif '–≤—Å—Ç—Ä–µ—á–∞' in text_lower or '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è' in text_lower:
            return 'medium'  # –û–±—ã—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏/–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ = medium
        elif '–≤–∞–∂–Ω–æ' in text_lower:
            return 'high'
        elif '—Ö–æ—á—É' in text_lower or '–ø–ª–∞–Ω–∏—Ä—É—é' in text_lower:
            return 'medium'
        elif '–º–µ—á—Ç–∞—é' in text_lower:
            return 'low'  # –ú–µ—á—Ç—ã = low –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        elif '—Ä–∞–¥—É—é—Å—å' in text_lower or '—Å—á–∞—Å—Ç—å–µ' in text_lower or '–±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å' in text_lower:
            return 'medium'  # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏ = medium –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        else:
            return 'medium'
    
    def _extract_due_date(self, text: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
        text_lower = text.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
        time_patterns = {
            # –¢–æ—á–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ HH:MM
            '6:30': '06:30',
            '6:30 —É—Ç—Ä–∞': '06:30',
            '6:30 —É—Ç—Ä–æ–º': '06:30',
            '7:15': '07:15',
            '7:15 —É—Ç—Ä–∞': '07:15',
            '7:15 —É—Ç—Ä–æ–º': '07:15',
            '8:30': '08:30',
            '8:30 —É—Ç—Ä–∞': '08:30',
            '9:45': '09:45',
            '9:45 —É—Ç—Ä–∞': '09:45',
            '10:15': '10:15',
            '10:15 —É—Ç—Ä–∞': '10:15',
            '11:45': '11:45',
            '11:45 —É—Ç—Ä–∞': '11:45',
            '12:15': '12:15',
            '12:15 –¥–Ω—è': '12:15',
            '13:45': '13:45',
            '13:45 –¥–Ω—è': '13:45',
            '14:15': '14:15',
            '14:15 –¥–Ω—è': '14:15',
            '15:30': '15:30',
            '15:30 –¥–Ω—è': '15:30',
            '16:45': '16:45',
            '16:45 –¥–Ω—è': '16:45',
            '17:15': '17:15',
            '17:15 –¥–Ω—è': '17:15',
            '18:30': '18:30',
            '18:30 –≤–µ—á–µ—Ä–∞': '18:30',
            '19:45': '19:45',
            '19:45 –≤–µ—á–µ—Ä–∞': '19:45',
            '20:15': '20:15',
            '20:15 –≤–µ—á–µ—Ä–∞': '20:15',
            '21:30': '21:30',
            '21:30 –≤–µ—á–µ—Ä–∞': '21:30',
            '21:45': '21:45',
            '21:45 –≤–µ—á–µ—Ä–∞': '21:45',
            '22:15': '22:15',
            '22:15 –≤–µ—á–µ—Ä–∞': '22:15',
            '23:30': '23:30',
            '23:30 –≤–µ—á–µ—Ä–∞': '23:30',
            
            # –§–æ—Ä–º–∞—Ç—ã "–≤ HH:MM"
            '–≤ 6:30': '06:30',
            '–≤ 6:30 —É—Ç—Ä–∞': '06:30',
            '–≤ 7:15': '07:15',
            '–≤ 7:15 —É—Ç—Ä–∞': '07:15',
            '–≤ 8:30': '08:30',
            '–≤ 8:30 —É—Ç—Ä–∞': '08:30',
            '–≤ 9:45': '09:45',
            '–≤ 9:45 —É—Ç—Ä–∞': '09:45',
            '–≤ 10:15': '10:15',
            '–≤ 10:15 —É—Ç—Ä–∞': '10:15',
            '–≤ 11:45': '11:45',
            '–≤ 11:45 —É—Ç—Ä–∞': '11:45',
            '–≤ 12:15': '12:15',
            '–≤ 12:15 –¥–Ω—è': '12:15',
            '–≤ 13:45': '13:45',
            '–≤ 13:45 –¥–Ω—è': '13:45',
            '–≤ 14:15': '14:15',
            '–≤ 14:15 –¥–Ω—è': '14:15',
            '–≤ 15:30': '15:30',
            '–≤ 15:30 –¥–Ω—è': '15:30',
            '–≤ 16:45': '16:45',
            '–≤ 16:45 –¥–Ω—è': '16:45',
            '–≤ 17:15': '17:15',
            '–≤ 17:15 –¥–Ω—è': '17:15',
            '–≤ 18:30': '18:30',
            '–≤ 18:30 –≤–µ—á–µ—Ä–∞': '18:30',
            '–≤ 19:45': '19:45',
            '–≤ 19:45 –≤–µ—á–µ—Ä–∞': '19:45',
            '–≤ 20:15': '20:15',
            '–≤ 20:15 –≤–µ—á–µ—Ä–∞': '20:15',
            '–≤ 21:30': '21:30',
            '–≤ 21:30 –≤–µ—á–µ—Ä–∞': '21:30',
            '–≤ 21:45': '21:45',
            '–≤ 21:45 –≤–µ—á–µ—Ä–∞': '21:45',
            '–≤ 22:15': '22:15',
            '–≤ 22:15 –≤–µ—á–µ—Ä–∞': '22:15',
            '–≤ 23:30': '23:30',
            '–≤ 23:30 –≤–µ—á–µ—Ä–∞': '23:30',
            
            # –°—Ç–∞—Ä—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            '–¥–æ 12 –¥–Ω—è': '12:00',
            '–¥–æ 12': '12:00',
            '12 –¥–Ω—è': '12:00',
            '12:00': '12:00',
            '12': '12:00',
            '–≤ 13': '13:00',
            '–≤ 14': '14:00',
            '–≤ 15': '15:00',
            '–≤ 16': '16:00',
            '–≤ 17': '17:00',
            '–≤ 18': '18:00',
            '–≤ 19': '19:00',
            '–≤ 20': '20:00',
            '–≤ 21': '21:00',
            '–≤ 22': '22:00',
            '–≤ 23': '23:00',
            '–≤ 10': '10:00',
            '–≤ 11': '11:00',
            '–≤ 7:00': '07:00',
            '–≤ 8:00': '08:00',
            '–≤ 9:00': '09:00',
            '–≤ 10:00': '10:00',
            '–≤ 11:00': '11:00',
            '–≤ 12:00': '12:00',
            '–≤ 13:00': '13:00',
            '–≤ 14:00': '14:00',
            '–≤ 15:00': '15:00',
            '–≤ 16:00': '16:00',
            '–≤ 17:00': '17:00',
            '–≤ 18:00': '18:00',
            '–≤ 19:00': '19:00',
            '–≤ 20:00': '20:00',
            '–≤ 21:00': '21:00',
            '–≤ 22:00': '22:00',
            '–≤ 23:00': '23:00',
            '–≤ 8': '08:00',
            '–≤ 9': '09:00',
            '–≤ 9:30': '09:30',
            '–≤ 10:30': '10:30',
            '–≤ 11:30': '11:30',
            '–≤ 12:30': '12:30',
            '–≤ 13:30': '13:30',
            '–≤ 14:30': '14:30',
            '–≤ 15:30': '15:30',
            '–≤ 16:30': '16:30',
            '–≤ 17:30': '17:30',
            '–≤ 18:30': '18:30',
            '–≤ 19:30': '19:30',
            '–≤ 20:30': '20:30',
            '–≤ 21:30': '21:30',
            '–≤ 22:30': '22:30',
            '–≤ 23:30': '23:30',
            '8 —É—Ç—Ä–∞': '08:00',
            '9 —É—Ç—Ä–∞': '09:00',
            '10 —É—Ç—Ä–∞': '10:00',
            '11 —É—Ç—Ä–∞': '11:00',
            '12 –¥–Ω—è': '12:00',
            '13 –¥–Ω—è': '13:00',
            '14 –¥–Ω—è': '14:00',
            '15 –¥–Ω—è': '15:00',
            '16 –¥–Ω—è': '16:00',
            '17 –¥–Ω—è': '17:00',
            '18 –≤–µ—á–µ—Ä–∞': '18:00',
            '19 –≤–µ—á–µ—Ä–∞': '19:00',
            '20 –≤–µ—á–µ—Ä–∞': '20:00',
            '21 –≤–µ—á–µ—Ä–∞': '21:00',
            '22 –≤–µ—á–µ—Ä–∞': '22:00',
            '23 –≤–µ—á–µ—Ä–∞': '23:00',
            '–≤ 8 —É—Ç—Ä–∞': '08:00',
            '–≤ 9 —É—Ç—Ä–∞': '09:00',
            '–≤ 10 —É—Ç—Ä–∞': '10:00',
            '–≤ 11 —É—Ç—Ä–∞': '11:00',
            '–≤ 12 –¥–Ω—è': '12:00',
            '–≤ 13 –¥–Ω—è': '13:00',
            '–≤ 14 –¥–Ω—è': '14:00',
            '–≤ 15 –¥–Ω—è': '15:00',
            '–≤ 16 –¥–Ω—è': '16:00',
            '–≤ 17 –¥–Ω—è': '17:00',
            '–≤ 18 –≤–µ—á–µ—Ä–∞': '18:00',
            '–≤ 19 –≤–µ—á–µ—Ä–∞': '19:00',
            '–≤ 20 –≤–µ—á–µ—Ä–∞': '20:00',
            '–≤ 21 –≤–µ—á–µ—Ä–∞': '21:00',
            '–≤ 22 –≤–µ—á–µ—Ä–∞': '22:00',
            '–≤ 23 –≤–µ—á–µ—Ä–∞': '23:00',
            '13:00': '13:00',
            '14:00': '14:00',
            '15:00': '15:00',
            '16:00': '16:00',
            '17:00': '17:00',
            '18:00': '18:00',
            '19:00': '19:00',
            '20:00': '20:00',
            '21:00': '21:00',
            '22:00': '22:00',
            '23:00': '23:00',
            '10:00': '10:00',
            '11:00': '11:00',
            '08:00': '08:00',
            '09:00': '09:00',
            '09:30': '09:30',
            '10:30': '10:30',
            '11:30': '11:30',
            '12:30': '12:30',
            '13:30': '13:30',
            '14:30': '14:30',
            '15:30': '15:30',
            '16:30': '16:30',
            '17:30': '17:30',
            '18:30': '18:30',
            '19:30': '19:30',
            '20:30': '20:30',
            '21:30': '21:30',
            '22:30': '22:30',
            '23:30': '23:30',
            '00:30': '00:30',
            '—É—Ç—Ä–æ–º': '10:00',
            '—É—Ç—Ä–æ': '10:00',
            '–¥–Ω–µ–º': '14:00',
            '–¥–µ–Ω—å': '14:00',
            '–≤–µ—á–µ—Ä–æ–º': '18:00',
            '–≤–µ—á–µ—Ä': '18:00',
            '–Ω–æ—á—å—é': '22:00',
            '–Ω–æ—á—å': '22:00',
            '–¥–æ 10': '10:00',
            '–¥–æ 14': '14:00',
            '–¥–æ 18': '18:00',
            '–¥–æ 20': '20:00'
        }
        
        # –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ
        specific_time = None
        print(f"üîç DEBUG: –ò—â–µ–º –≤—Ä–µ–º—è –≤ —Ç–µ–∫—Å—Ç–µ '{text_lower}'")
        for pattern, time in time_patterns.items():
            if pattern in text_lower:
                specific_time = time
                print(f"‚úÖ DEBUG: –ù–∞–π–¥–µ–Ω–æ –≤—Ä–µ–º—è '{pattern}' -> '{time}'")
                break
        
        if not specific_time:
            print(f"‚ö†Ô∏è DEBUG: –í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ 18:00")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É
        if '—Å—Ä–æ—á–Ω–æ' in text_lower:
            date = self.current_date
        elif '–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞' in text_lower:
            date = self.current_date + timedelta(days=2)
        elif '–∑–∞–≤—Ç—Ä–∞' in text_lower:
            date = self.current_date + timedelta(days=1)
        elif '—Å–µ–≥–æ–¥–Ω—è' in text_lower:
            date = self.current_date
        elif '—Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ' in text_lower or '—Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–∏' in text_lower:
            date = self.current_date + timedelta(days=7)
        elif '—ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ' in text_lower:
            date = self.current_date + timedelta(days=3)
        elif '–∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å' in text_lower:
            date = self.current_date + timedelta(days=1)
        else:
            date = self.current_date + timedelta(days=1)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
        time = specific_time if specific_time else "18:00"
        
        return date.strftime(f"%Y-%m-%d {time}")
    
    def improve_from_feedback(self, user_input: str, model_output: List[Dict], feedback: str) -> List[Dict]:
        """–£–ª—É—á—à–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        print(f"üéì –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: {feedback[:50]}...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –≤ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
        training_example = {
            "input": user_input,
            "expected": model_output,
            "feedback": feedback,
            "timestamp": datetime.now().isoformat()
        }
        
        self.training_data.append(training_example)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
        try:
            with open('voicaj_training_data.json', 'w', encoding='utf-8') as f:
                json.dump(self.training_data, f, ensure_ascii=False, indent=2)
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        return model_output

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–±—Ä–∏–¥–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
    
    llm = HybridVoicajLLM()
    
    # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    simple_test = "–∑–∞–≤—Ç—Ä–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é"
    print(f"\nüìù –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç: {simple_test}")
    result1 = llm.analyze_text(simple_test)
    print(f"‚ö° –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result1, ensure_ascii=False, indent=2)}")
    
    # –¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    complex_test = "–∑–∞–≤—Ç—Ä–∞ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—é –∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞, –∞ —Ç–∞–∫–∂–µ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∏ –æ–±—Å—É–¥–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏"
    print(f"\nüìù –°–ª–æ–∂–Ω—ã–π —Ç–µ—Å—Ç: {complex_test}")
    result2 = llm.analyze_text(complex_test)
    print(f"üß† –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(result2, ensure_ascii=False, indent=2)}")
