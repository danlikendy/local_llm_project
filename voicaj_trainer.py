#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import io
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any

# Fix console encoding for Windows
if sys.platform.startswith('win'):
    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8', errors='replace')
    sys.stderr = io.TextIOWrapper(sys.stderr.buffer, encoding='utf-8', errors='replace')

class VoicajTrainer:
    """–°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è Voicaj LLM –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö"""
    
    def __init__(self):
        self.training_data = []
        self.current_date = datetime.now()
        
    def add_training_example(self, user_input: str, expected_output: List[Dict[str, Any]], 
                           feedback: str = ""):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        example = {
            "input": user_input,
            "expected": expected_output,
            "feedback": feedback,
            "timestamp": datetime.now().isoformat()
        }
        self.training_data.append(example)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è: {user_input[:50]}...")
        
    def analyze_feedback(self, user_input: str, model_output: List[Dict[str, Any]], 
                        user_feedback: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è"""
        improvements = {
            "title_improvements": [],
            "description_improvements": [],
            "date_improvements": [],
            "tag_improvements": [],
            "priority_improvements": []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        feedback_lower = user_feedback.lower()
        
        if "–æ–ø–∏—Å–∞–Ω–∏–µ" in feedback_lower or "–º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in feedback_lower:
            improvements["description_improvements"].append("–î–µ–ª–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏")
            
        if "–¥–∞—Ç–∞" in feedback_lower or "–∑–∞–≤—Ç—Ä–∞" in feedback_lower:
            improvements["date_improvements"].append("–ü—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—á–∏—Å–ª—è—Ç—å –¥–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏")
            
        if "–∑–∞–≥–æ–ª–æ–≤–æ–∫" in feedback_lower or "–Ω–∞–∑–≤–∞–Ω–∏–µ" in feedback_lower:
            improvements["title_improvements"].append("–°–æ–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏")
            
        return improvements
        
    def generate_improved_output(self, user_input: str, original_output: List[Dict[str, Any]], 
                                improvements: Dict[str, Any]) -> List[Dict[str, Any]]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
        improved_output = []
        
        for obj in original_output:
            improved_obj = obj.copy()
            
            # –£–ª—É—á—à–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            if improvements["title_improvements"]:
                improved_obj["title"] = self._improve_title(user_input, obj["type"])
                
            # –£–ª—É—á—à–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π
            if improvements["description_improvements"]:
                improved_obj["description"] = self._improve_description(user_input, obj["type"])
                
            # –£–ª—É—á—à–µ–Ω–∏–µ –¥–∞—Ç
            if improvements["date_improvements"]:
                improved_obj["dueDate"] = self._improve_date(user_input)
                
            improved_output.append(improved_obj)
            
        return improved_output
        
    def _improve_title(self, user_input: str, task_type: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        input_lower = user_input.lower()
        
        if task_type == "task":
            if "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏" in input_lower:
                return "–í—Å—Ç—Ä–µ—á–∞ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏"
            elif "–≤—Ä–∞—á" in input_lower:
                return "–í–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É"
            elif "–∫—É–ø–∏—Ç—å" in input_lower:
                return "–ü–æ–∫—É–ø–∫–∏"
            elif "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å" in input_lower:
                return "–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
            else:
                return "–ó–∞–¥–∞—á–∞"
                
        elif task_type == "mood_entry":
            if "–æ—Ç–ª–∏—á–Ω–æ" in input_lower:
                return "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
            elif "—É—Å—Ç–∞–ª" in input_lower:
                return "–£—Å—Ç–∞–ª–æ—Å—Ç—å"
            elif "–ø–æ–¥–∞–≤–ª–µ–Ω" in input_lower:
                return "–ü–æ–¥–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç—å"
            else:
                return "–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è"
                
        elif task_type == "habit":
            if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å" in input_lower:
                return "–ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
            elif "–±–µ–≥–∞—Ç—å" in input_lower:
                return "–£—Ç—Ä–µ–Ω–Ω–∏–π –±–µ–≥"
            elif "—á–∏—Ç–∞—Ç—å" in input_lower:
                return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —á—Ç–µ–Ω–∏–µ"
            else:
                return "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
                
        return obj.get("title", "–ó–∞–ø–∏—Å—å")
        
    def _improve_description(self, user_input: str, task_type: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        input_lower = user_input.lower()
        
        if task_type == "task":
            if "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏" in input_lower:
                return "–í—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–µ–º–µ–π–Ω—ã—Ö —Å–≤—è–∑–µ–π"
            elif "–≤—Ä–∞—á" in input_lower:
                return "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º –∫ –≤—Ä–∞—á—É –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"
            elif "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å" in input_lower:
                return "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞–≤—ã–∫–æ–≤"
            else:
                return "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É"
                
        elif task_type == "mood_entry":
            if "–æ—Ç–ª–∏—á–Ω–æ" in input_lower:
                return "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ, –ø–æ–ª–æ–Ω —ç–Ω–µ—Ä–≥–∏–∏ –∏ –ø–æ–∑–∏—Ç–∏–≤–∞"
            elif "—É—Å—Ç–∞–ª" in input_lower:
                return "–ò—Å–ø—ã—Ç—ã–≤–∞—é —É—Å—Ç–∞–ª–æ—Å—Ç—å –∏ –Ω—É–∂–¥–∞—é—Å—å –≤ –æ—Ç–¥—ã—Ö–µ"
            else:
                return "–ó–∞–ø–∏—Å—å –æ —Ç–µ–∫—É—â–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
                
        elif task_type == "habit":
            if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å" in input_lower:
                return "–†–µ–≥—É–ª—è—Ä–Ω–æ –∏–∑—É—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è"
            elif "–±–µ–≥–∞—Ç—å" in input_lower:
                return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –±–µ–≥–∞—Ç—å –ø–æ —É—Ç—Ä–∞–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π —Ñ–æ—Ä–º—ã"
            else:
                return "–†–∞–∑–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É"
                
        return "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏"
        
    def _improve_date(self, user_input: str) -> str:
        """–£–ª—É—á—à–∞–µ—Ç –¥–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        input_lower = user_input.lower()
        
        if "–∑–∞–≤—Ç—Ä–∞" in input_lower:
            tomorrow = self.current_date + timedelta(days=1)
            return tomorrow.strftime("%Y-%m-%d %H:%M")
        elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in input_lower:
            day_after = self.current_date + timedelta(days=2)
            return day_after.strftime("%Y-%m-%d %H:%M")
        elif "—Å–µ–≥–æ–¥–Ω—è" in input_lower:
            return self.current_date.strftime("%Y-%m-%d %H:%M")
        else:
            return self.current_date.strftime("%Y-%m-%d %H:%M")
            
    def save_training_data(self, filename: str = "voicaj_training_data.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª"""
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(self.training_data, f, ensure_ascii=False, indent=2)
        print(f"üíæ –î–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")
        
    def load_training_data(self, filename: str = "voicaj_training_data.json"):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                self.training_data = json.load(f)
            print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.training_data)} –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è")
        except FileNotFoundError:
            print(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –Ω–∞–±–æ—Ä–∞")
            
    def print_training_summary(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–±—É—á–µ–Ω–∏—é"""
        print(f"\nüìä –°–í–û–î–ö–ê –ü–û –û–ë–£–ß–ï–ù–ò–Æ:")
        print(f"–í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: {len(self.training_data)}")
        
        if self.training_data:
            print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–∏–º–µ—Ä: {self.training_data[-1]['input'][:50]}...")
            print(f"–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {self.training_data[-1]['timestamp']}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    trainer = VoicajTrainer()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    trainer.load_training_data()
    
    # –ü—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é
    user_input = "—Å–µ–≥–æ–¥–Ω—è —è —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –æ—Ç–ª–∏—á–Ω–æ, –ø–æ—Å—Ç–∞–≤—å –∑–∞–¥–∞—á—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏, –∞ —Ç–∞–∫–∂–µ —Ö–æ—á—É –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å"
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –º–æ–¥–µ–ª–∏ (–ø–ª–æ—Ö–æ–π)
    original_output = [
        {
            "description": "–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É",
            "dueDate": "2025-10-08 23:08",
            "priority": "high",
            "tags": ["—Ä–∞–±–æ—Ç–∞", "—Å–µ–º—å—è", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
            "title": "–í—Å—Ç—Ä–µ—á–∞",
            "type": "task"
        },
        {
            "description": "–ó–∞–ø–∏—Å—å –æ —Ç–µ–∫—É—â–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏",
            "priority": "high",
            "tags": ["—Ä–∞–±–æ—Ç–∞", "—Å–µ–º—å—è", "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
            "title": "–ó–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è",
            "type": "mood_entry"
        }
    ]
    
    # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    feedback = "–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø–æ—á–µ–º—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ —Ç—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ –∏ —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏? —Ç–∞–∫–∂–µ –ø–æ—á–µ–º—É —Ç—ã –ø–æ—Å—Ç–∞–≤–∏–ª 8 –æ–∫—Ç—è–±—Ä—è, –µ—Å–ª–∏ –∑–∞–≤—Ç—Ä–∞ 7"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    improvements = trainer.analyze_feedback(user_input, original_output, feedback)
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò:")
    for category, items in improvements.items():
        if items:
            print(f"{category}: {items}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    improved_output = trainer.generate_improved_output(user_input, original_output, improvements)
    print(f"\n‚ú® –£–õ–£–ß–®–ï–ù–ù–´–ô –í–´–í–û–î:")
    for i, obj in enumerate(improved_output):
        print(f"{i+1}. {obj['title']} - {obj['description']}")
        print(f"   –î–∞—Ç–∞: {obj.get('dueDate', 'N/A')}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä –æ–±—É—á–µ–Ω–∏—è
    trainer.add_training_example(user_input, improved_output, feedback)
    trainer.save_training_data()
    trainer.print_training_summary()
